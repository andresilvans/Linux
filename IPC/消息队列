
comm.h

#ifndef _COMM_H_
#define _COMM_H_
#include <stdio.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/msg.h>
struct msgbuf
{
      long mtype;
    char mtext[1024];
};
#define SERVER_TYPE 1
#define CLIENT_TYPE 2
int createMsgQueue();
int getMsgQueue();
int destoryMsgQueue(int msgid);
int sendMsg(int msgid, int who, char* msg);
int recvMsg(int msgid, int recvType, char out[]);

comm.c

#include "comm.h"
static int commMsgQueue(int flags)
{
      key_t key = ftok("/tmp", 0x6666);
      if (key < 0)
          {
              perror("ftok");
              return -1;
           }
      
       int msgid = msgget(key, flags);
       if (msgid < 0)
           {
               perror("msgget");
           }
       return msgid;
}
int createMsgQueue()
{
    return commMsgQueue(IPC_CREAT | IPC_EXCL | 0666);
}
int getMsgQueue()
{
      return commMsgQueue(IPC_CREAT);
}
int destoryMsgQueue(int msgid)
{
      if (msgctl(msgid, IPC_RMID, NULL) < 0)
          {
              perror("msgctl");
              return -1;
          }
      return 0;
}
int sendMsg(int msgid, int who, char* msg)
{
      struct msgbuf buf;
      buf.mtype = who;
      strcpy(buf.mtext, msg);
      
          if (msgsnd(msgid, (void*)&buf, sizeof(buf.mtext), 0) < 0)
          {
              perror("msgsnd");
              return -1;
          }
      return 0;
}
int recvMsg(int msgid, int recvType, char out[])
{
      struct msgbuf buf;
      int size = sizeof(buf.mtext);
      if (msgrcv(msgid, (void*)&buf, size, recvType, 0) < 0)
          {
              perror("msgrcv");
              return -1;
          }
      
          strncpy(out, buf.mtext, size);
      out[size] = 0;
      return 0;
}

server.c

#include "comm.h"
int main()
{
      int msgid = createMsgQueue();
      
      char buf[1024];
      while (1)
          {
               buf[0] = 0;
               recvMsg(msgid, CLIENT_TYPE, buf);
               printf("client# %s\n", buf);
                   printf("please enter# ");
                 fflush(stdout);
                 ssize_t s = read(0, buf, sizeof(buf));
                 if (s > 0)
                     {
                         buf[s - 1] = 0;
                         sendMsg(msgid, SERVER_TYPE, buf);
                         printf("send done, wait recv...\n");
                     }
}
      destorymsgQueue(msgid);
      return 0;
}

client.c

#include "comm.h"
int main()
{
      int msgid = getMsgQueue();
      
      char buf[1024];
      while (1)
           {
               buf[0] = 0;
      
                   printf("please enter# ");
                 fflush(stdout);
                 ssize_t s = read(0, buf, sizeof(buf));
                 if (s > 0)
                     {
                         buf[s - 1] = 0;
                         sendMsg(msgid, CLIENT_TYPE, buf);
                         printf("send done, wait recv...\n");
                     }
                 recvMsg(msgid, SERVER_TYPE, buf);
                 printf("server# %s\n", buf);
      }
      return 0;
}
